#include "Output.h"

#include "Commands.h"

namespace Skeltn { namespace Commands {
	void help(int argc, char **argv) {
		Out << "Skeltn is a tool meant for easing the development of C and C++ projects by providing a straightfoward way to set up a working build process.\n\n";
		Out << "There are several commands that you will likely want to use:\n\n";
		
		Out <<
		"$ " << BlueText << "skeltn init [Project Name]" << End << ": initializes an empty project that skeltn can build. Creates a 'src' directory, an 'include' directory, a basic 'Main.cpp' and a '.skeltn' file that specifies build parameters.\n\n"
		<<
		"$ " << BlueText << "skeltn build" << End << ": builds the project in the current directory. Requires the presence of a '.skeltn' file, and may fail if you haven't set up your build environment (mainly necessary on Windows).\n\n"
		<<
		"$ " << BlueText << "skeltn clean" << End << ": cleans the project directory.\n\n"
		<<
		"$ " << BlueText << "skeltn set compiler" << End << ": necessary setup on a Windows machine, unless you already have MSVC in your PATH, or are using the Visual Studio Command Prompt. Tells skeltn that the MSVC compiler, linker, and nmake reside inside the current directory.\n\n"
		<<
		"$ " << BlueText << "skeltn link add" << End << ": adds the current directory as a path the compiler will search for link libraries. Mostly necessary on Windows, which doesn't have the usual environment variables for include and link directories.\n\n"
		<<
		"$ " << BlueText << "skeltn include add" << End << ": adds the current directory as a path the compiler will search for include directories. Mostly necessary on Windows, which doesn't have the usual environment variables for include and link directories.\n\n";
		
		Out << "To learn how to actually write a '.skeltn' file, consult the documentation--although the file generated by 'skeltn init' is probably enough to get a project working.\n";
	}
} }